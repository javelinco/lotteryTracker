import { PowerballDrawingRepository } from './repositories/powerball-drawing';
import { PowerballTicketDrawingRepository } from './repositories/powerball-ticket-drawing';
import { PowerballTicketNumber } from './interfaces/powerball-ticket-number';
import { PowerballTicketNumberRepository } from './repositories/powerball-ticket-number';
import { PowerballDrawing } from './interfaces/powerball-drawing';
import { PowerballTicketRepository } from './repositories/powerball-ticket';
import { OwnerWinningRepository } from './repositories/owner-winning';
import { PowerballTicketReport } from './interfaces/powerball-ticket-report';
import { PowerballNumber } from './interfaces/powerball-number';
import { DrawingWinning, TicketWinning } from './interfaces/drawing-winning';
export declare class Powerball {
    private powerballUrl;
    private powerballDrawingRepository;
    private powerballTicketDrawingRepository;
    private powerballTicketNumberRepository;
    private powerballTicketRepository;
    private ownerWinningRepository;
    static defaultGrandPrize: number;
    constructor(powerballDrawingRepository?: PowerballDrawingRepository, powerballTicketDrawingRepository?: PowerballTicketDrawingRepository, powerballTicketNumberRepository?: PowerballTicketNumberRepository, powerballTicketRepository?: PowerballTicketRepository, ownerWinningRepository?: OwnerWinningRepository);
    addTicket(purchaseDate: Date, powerPlay: boolean, numbers: Array<PowerballNumber>, drawings: number): Promise<PowerballTicketReport>;
    getPowerballReportsByDrawingDate(drawingDate: Date): Promise<Array<PowerballTicketReport>>;
    getWinningsSinceLastDrawing(): Promise<Array<DrawingWinning>>;
    calculateWinning(ticketId: string, powerplay: boolean, powerballDrawing: PowerballDrawing, powerballTicketNumbers: Array<PowerballTicketNumber>, grandPrize: number): TicketWinning;
    calculatePrize(matches: number, powerNumberMatch: boolean, powerPlay: boolean, multiplier: number, grandPrize: number): number;
    getPowerballDrawingsSince(beginDate: Date): Promise<Array<PowerballDrawing>>;
    getPowerballDrawingDates(purchaseDate: Date, drawings: number): Array<Date>;
    private getMatchCountForTicketNumber;
    private getMatch;
    private convert;
}
